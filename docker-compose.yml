version: '3.8'

services:
  # Backend API service
  spores:
    build: ./spores
    image: spores:latest
    volumes:
      - spores_data:/app
      - go-modules:/go/pkg/mod
    ports:
      - "8080:8080"
    depends_on:
      - mongodb
      - redis
      - zero
    environment:
      MONGO_URI: mongodb://mongo_user:mongo_password@mongodb:27017/mongo-db
      REDIS_URI: redis://redis:6379
      CORS_ORIGIN: http://localhost:5173
    networks:
      - verden_network

  simulation:
    build: ./simulation
    image: simulation:latest
    volumes:
      - simulation_data:/app
      - go-modules:/go/pkg/mod
    depends_on:
      - spores
    ports:
      - "5:5"
    networks:
      - verden_network

  # Frontend service
  verden-ui:
    build: ./verden-ui
    image: verden-ui:latest
    volumes:
      - frontend_data:/app
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:8080
    networks:
      - verden_network

  # MongoDB service
  mongodb:
    image: mongo:latest
    volumes:
      - mongodb_data:/data/db
    # env_file: ./mongodb/.env-mongo
    ports:
      - "27017:27017"
    networks:
      - verden_network

  # Redis service
  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - verden_network

  # Dgraph Zero service
  zero:
    image: dgraph/dgraph:latest
    volumes:
      - dgraph_data_zero:/dgraph
    ports:
      - "5080:5080"
      - "6080:6080"
    restart: on-failure
    command: dgraph zero --my=zero:5080
    networks:
      - dgraph_network

  # Dgraph Alpha service
  alpha:
    image: dgraph/dgraph:latest
    volumes:
      - dgraph_data_alpha:/dgraph
    ports:
      - "8081:8080" 
      - "9080:9080"
    restart: on-failure
    command: dgraph alpha --my=alpha:7080 --zero=zero:5080
    networks:
      - dgraph_network

  # Dgraph Ratel service
  ratel:
    image: dgraph/ratel:latest
    ports:
      - "8000:8000"
    networks:
      - dgraph_network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus_data:/etc/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring_network

  # Grafana for data visualization
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    # env_file: ./grafana/.env-grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring_network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - monitoring_network

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    networks:
      - monitoring_network

  swagger-ui:
    image: swaggerapi/swagger-ui
    environment:
      SWAGGER_JSON: /app/swagger.json
    volumes:
      - swagger_data:/app
    ports:
      - "8082:8080"
    networks:
      - verden_network

  spark-master:
    image: bitnami/spark:latest
    environment:
      SPARK_MODE: master
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_MASTER_PORT: 7077
      SPARK_MASTER_WEBUI_PORT: 8080
    ports:
      - "7077:7077"
      - "8083:8080"
    networks:
      - verden_network

  spark-worker:
    image: bitnami/spark:latest
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
    networks:
      - verden_network
    ports:
      - "6:6"
    depends_on:
      - spark-master

  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - verden_network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - kafka_data:/var/lib/kafka
    networks:
      - verden_network
    depends_on:
      - zookeeper

  cassandra:
    image: cassandra:latest
    volumes:
      - cassandra_data:/var/lib/cassandra
    ports:
      - "9042:9042"
    networks:
      - db_network

  minio:
    image: minio/minio
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data
    ports:
      - "9000:9000"
    networks:
      - db_network

  alertmanager:
    image: prom/alertmanager
    volumes:
      - alertmanager_data:/etc/alertmanager
    ports:
      - "9093:9093"
    networks:
      - monitoring_network

  vault:
    image: vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - db_network

  sonarqube:
    image: sonarqube
    environment:
      SONARQUBE_JDBC_URL: jdbc:postgresql://sonarqube-db/sonar
    ports:
      - "9001:9000"  # Port changed to avoid conflict with sentry
    networks:
      - db_network
    depends_on:
      - sonarqube-db

  sonarqube-db:
    image: postgres
    volumes:
      - sonarqube_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    ports:
      - "1:1"
    networks:
      - db_network

  unleash:
    image: unleashorg/unleash-server
    environment:
      DATABASE_HOST: unleash-db
      DATABASE_NAME: unleash
      DATABASE_USERNAME: unleash
      DATABASE_PASSWORD: unleash
      DATABASE_SSL: "false"
    ports:
      - "4242:4242"
    networks:
      - db_network
    depends_on:
      - unleash-db

  unleash-db:
    image: postgres
    volumes:
      - unleash_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: unleash
      POSTGRES_PASSWORD: unleash
    ports:
      - "2:2"
    networks:
      - db_network

  sentry:
    image: getsentry/sentry
    environment:
      SENTRY_SECRET_KEY: 'your-secret-key'
      SENTRY_POSTGRES_HOST: sentry-db
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
    ports:
      - "9002:9000"  # Port changed to avoid conflict with sonarqube
    networks:
      - app_network
    depends_on:
      - sentry-db
      - redis

  sentry-db:
    image: postgres
    volumes:
      - sentry_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
    ports:
      - "3:3"
    networks:
      - app_network

  keycloak:
    image: jboss/keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak-db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: keycloak
    ports:
      - "8083:8080"  # Port changed to avoid conflict
    networks:
      - app_network
    depends_on:
      - keycloak-db

  keycloak-db:
    image: postgres
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    ports:
      - "4:4"
    networks:
      - app_network

volumes:
  spores_data:
  simulation_data:
  frontend_data:
  mongodb_data:
  redis_data:
  dgraph_data_zero:
  dgraph_data_alpha:
  prometheus_data:
  grafana_data:
  swagger_data:
  kafka_data:
  cassandra_data:
  minio_data:
  alertmanager_data:
  sonarqube_data:
  unleash_data:
  sentry_data:
  keycloak_data:
  go-modules:

networks:
  verden_network:
    driver: bridge
  dgraph_network:
    driver: bridge
  monitoring_network:
    driver: bridge
  db_network:
    driver: bridge
  app_network:
    driver: bridge
